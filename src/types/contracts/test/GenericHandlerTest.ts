/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface GenericHandlerTestInterface extends utils.Interface {
  functions: {
    "execute(address,uint8,address,bytes)": FunctionFragment;
    "fetch_chainID()": FunctionFragment;
    "genericDeposit(uint8,bytes4,bytes,bytes32,uint256,address)": FunctionFragment;
    "linkContract(address,uint8,address)": FunctionFragment;
    "unlinkContract(address,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "execute"
      | "fetch_chainID"
      | "genericDeposit"
      | "linkContract"
      | "unlinkContract"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "execute",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fetch_chainID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genericDeposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "linkContract",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkContract",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetch_chainID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genericDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlinkContract",
    data: BytesLike
  ): Result;

  events: {
    "deposit(uint8,bytes4,bytes,bytes32,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "deposit"): EventFragment;
}

export interface depositEventObject {
  chainID: number;
  _interface: string;
  _data: string;
  _hash: string;
  _gas: BigNumber;
  _feeToken: string;
}
export type depositEvent = TypedEvent<
  [number, string, string, string, BigNumber, string],
  depositEventObject
>;

export type depositEventFilter = TypedEventFilter<depositEvent>;

export interface GenericHandlerTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GenericHandlerTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    execute(
      _crossTalkAddr: PromiseOrValue<string>,
      srcChainID: PromiseOrValue<BigNumberish>,
      srcAddress: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fetch_chainID(overrides?: CallOverrides): Promise<[number]>;

    genericDeposit(
      _destChainID: PromiseOrValue<BigNumberish>,
      _selector: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      _hash: PromiseOrValue<BytesLike>,
      _gas: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    linkContract(
      _interface: PromiseOrValue<string>,
      _chainID: PromiseOrValue<BigNumberish>,
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlinkContract(
      _interface: PromiseOrValue<string>,
      _chainID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  execute(
    _crossTalkAddr: PromiseOrValue<string>,
    srcChainID: PromiseOrValue<BigNumberish>,
    srcAddress: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fetch_chainID(overrides?: CallOverrides): Promise<number>;

  genericDeposit(
    _destChainID: PromiseOrValue<BigNumberish>,
    _selector: PromiseOrValue<BytesLike>,
    _data: PromiseOrValue<BytesLike>,
    _hash: PromiseOrValue<BytesLike>,
    _gas: PromiseOrValue<BigNumberish>,
    _feeToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  linkContract(
    _interface: PromiseOrValue<string>,
    _chainID: PromiseOrValue<BigNumberish>,
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlinkContract(
    _interface: PromiseOrValue<string>,
    _chainID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    execute(
      _crossTalkAddr: PromiseOrValue<string>,
      srcChainID: PromiseOrValue<BigNumberish>,
      srcAddress: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    fetch_chainID(overrides?: CallOverrides): Promise<number>;

    genericDeposit(
      _destChainID: PromiseOrValue<BigNumberish>,
      _selector: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      _hash: PromiseOrValue<BytesLike>,
      _gas: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    linkContract(
      _interface: PromiseOrValue<string>,
      _chainID: PromiseOrValue<BigNumberish>,
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlinkContract(
      _interface: PromiseOrValue<string>,
      _chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "deposit(uint8,bytes4,bytes,bytes32,uint256,address)"(
      chainID?: null,
      _interface?: null,
      _data?: null,
      _hash?: null,
      _gas?: null,
      _feeToken?: null
    ): depositEventFilter;
    deposit(
      chainID?: null,
      _interface?: null,
      _data?: null,
      _hash?: null,
      _gas?: null,
      _feeToken?: null
    ): depositEventFilter;
  };

  estimateGas: {
    execute(
      _crossTalkAddr: PromiseOrValue<string>,
      srcChainID: PromiseOrValue<BigNumberish>,
      srcAddress: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fetch_chainID(overrides?: CallOverrides): Promise<BigNumber>;

    genericDeposit(
      _destChainID: PromiseOrValue<BigNumberish>,
      _selector: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      _hash: PromiseOrValue<BytesLike>,
      _gas: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    linkContract(
      _interface: PromiseOrValue<string>,
      _chainID: PromiseOrValue<BigNumberish>,
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlinkContract(
      _interface: PromiseOrValue<string>,
      _chainID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    execute(
      _crossTalkAddr: PromiseOrValue<string>,
      srcChainID: PromiseOrValue<BigNumberish>,
      srcAddress: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fetch_chainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    genericDeposit(
      _destChainID: PromiseOrValue<BigNumberish>,
      _selector: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      _hash: PromiseOrValue<BytesLike>,
      _gas: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    linkContract(
      _interface: PromiseOrValue<string>,
      _chainID: PromiseOrValue<BigNumberish>,
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlinkContract(
      _interface: PromiseOrValue<string>,
      _chainID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
