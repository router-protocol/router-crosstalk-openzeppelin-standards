/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IGenericHandler {
  export type RouterLinkerStruct = {
    _rSyncContract: PromiseOrValue<string>;
    _chainID: PromiseOrValue<BigNumberish>;
    _linkedContract: PromiseOrValue<string>;
    linkerType: PromiseOrValue<BigNumberish>;
  };

  export type RouterLinkerStructOutput = [string, number, string, number] & {
    _rSyncContract: string;
    _chainID: number;
    _linkedContract: string;
    linkerType: number;
  };
}

export interface IGenericHandlerInterface extends utils.Interface {
  functions: {
    "MapContract((address,uint8,address,uint8),bytes)": FunctionFragment;
    "UnMapContract((address,uint8,address,uint8),bytes)": FunctionFragment;
    "fetch_chainID()": FunctionFragment;
    "genericDeposit(uint8,bytes4,bytes,bytes32,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MapContract"
      | "UnMapContract"
      | "fetch_chainID"
      | "genericDeposit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MapContract",
    values: [IGenericHandler.RouterLinkerStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "UnMapContract",
    values: [IGenericHandler.RouterLinkerStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetch_chainID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genericDeposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "MapContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UnMapContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetch_chainID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genericDeposit",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IGenericHandler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGenericHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MapContract(
      linker: IGenericHandler.RouterLinkerStruct,
      _sign: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    UnMapContract(
      linker: IGenericHandler.RouterLinkerStruct,
      _sign: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fetch_chainID(overrides?: CallOverrides): Promise<[number]>;

    genericDeposit(
      _destChainID: PromiseOrValue<BigNumberish>,
      _selector: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      _hash: PromiseOrValue<BytesLike>,
      _gas: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MapContract(
    linker: IGenericHandler.RouterLinkerStruct,
    _sign: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  UnMapContract(
    linker: IGenericHandler.RouterLinkerStruct,
    _sign: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fetch_chainID(overrides?: CallOverrides): Promise<number>;

  genericDeposit(
    _destChainID: PromiseOrValue<BigNumberish>,
    _selector: PromiseOrValue<BytesLike>,
    _data: PromiseOrValue<BytesLike>,
    _hash: PromiseOrValue<BytesLike>,
    _gas: PromiseOrValue<BigNumberish>,
    _feeToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MapContract(
      linker: IGenericHandler.RouterLinkerStruct,
      _sign: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    UnMapContract(
      linker: IGenericHandler.RouterLinkerStruct,
      _sign: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    fetch_chainID(overrides?: CallOverrides): Promise<number>;

    genericDeposit(
      _destChainID: PromiseOrValue<BigNumberish>,
      _selector: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      _hash: PromiseOrValue<BytesLike>,
      _gas: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    MapContract(
      linker: IGenericHandler.RouterLinkerStruct,
      _sign: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    UnMapContract(
      linker: IGenericHandler.RouterLinkerStruct,
      _sign: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fetch_chainID(overrides?: CallOverrides): Promise<BigNumber>;

    genericDeposit(
      _destChainID: PromiseOrValue<BigNumberish>,
      _selector: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      _hash: PromiseOrValue<BytesLike>,
      _gas: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MapContract(
      linker: IGenericHandler.RouterLinkerStruct,
      _sign: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    UnMapContract(
      linker: IGenericHandler.RouterLinkerStruct,
      _sign: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fetch_chainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    genericDeposit(
      _destChainID: PromiseOrValue<BigNumberish>,
      _selector: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      _hash: PromiseOrValue<BytesLike>,
      _gas: PromiseOrValue<BigNumberish>,
      _feeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
