/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IERC3156FlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashBorrower__factory>;
    getContractFactory(
      name: "IERC3156FlashLender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashLender__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IGenericHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGenericHandler__factory>;
    getContractFactory(
      name: "IRouterCrossTalk",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouterCrossTalk__factory>;
    getContractFactory(
      name: "RouterCrossTalk",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RouterCrossTalk__factory>;
    getContractFactory(
      name: "Greeter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Greeter__factory>;
    getContractFactory(
      name: "CrossChainERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainERC1155__factory>;
    getContractFactory(
      name: "CrossChainERC1155Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainERC1155Burnable__factory>;
    getContractFactory(
      name: "CrossChainERC1155Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainERC1155Pausable__factory>;
    getContractFactory(
      name: "CrossChainERC1155Supply",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainERC1155Supply__factory>;
    getContractFactory(
      name: "CrossChainERC1155URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainERC1155URIStorage__factory>;
    getContractFactory(
      name: "ICrossChainERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrossChainERC1155MetadataURI__factory>;
    getContractFactory(
      name: "ICrossChainERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrossChainERC1155__factory>;
    getContractFactory(
      name: "CrossChainERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainERC20__factory>;
    getContractFactory(
      name: "CrossChainERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainERC20Burnable__factory>;
    getContractFactory(
      name: "CrossChainERC20Capped",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainERC20Capped__factory>;
    getContractFactory(
      name: "CrossChainERC20FlashMint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainERC20FlashMint__factory>;
    getContractFactory(
      name: "CrossChainERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainERC20Pausable__factory>;
    getContractFactory(
      name: "ICrossChainERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrossChainERC20Metadata__factory>;
    getContractFactory(
      name: "ICrossChainERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrossChainERC20__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IERC3156FlashBorrower",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashBorrower>;
    getContractAt(
      name: "IERC3156FlashLender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashLender>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IGenericHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGenericHandler>;
    getContractAt(
      name: "IRouterCrossTalk",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouterCrossTalk>;
    getContractAt(
      name: "RouterCrossTalk",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RouterCrossTalk>;
    getContractAt(
      name: "Greeter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Greeter>;
    getContractAt(
      name: "CrossChainERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainERC1155>;
    getContractAt(
      name: "CrossChainERC1155Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainERC1155Burnable>;
    getContractAt(
      name: "CrossChainERC1155Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainERC1155Pausable>;
    getContractAt(
      name: "CrossChainERC1155Supply",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainERC1155Supply>;
    getContractAt(
      name: "CrossChainERC1155URIStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainERC1155URIStorage>;
    getContractAt(
      name: "ICrossChainERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICrossChainERC1155MetadataURI>;
    getContractAt(
      name: "ICrossChainERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICrossChainERC1155>;
    getContractAt(
      name: "CrossChainERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainERC20>;
    getContractAt(
      name: "CrossChainERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainERC20Burnable>;
    getContractAt(
      name: "CrossChainERC20Capped",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainERC20Capped>;
    getContractAt(
      name: "CrossChainERC20FlashMint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainERC20FlashMint>;
    getContractAt(
      name: "CrossChainERC20Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainERC20Pausable>;
    getContractAt(
      name: "ICrossChainERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICrossChainERC20Metadata>;
    getContractAt(
      name: "ICrossChainERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICrossChainERC20>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
