/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  GenericHandlerTest,
  GenericHandlerTestInterface,
} from "../../../contracts/test/GenericHandlerTest";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "chainID",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_gasLimit",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_gasPrice",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_feeToken",
        type: "address",
      },
    ],
    name: "deposit",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_crossTalkAddr",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "srcChainID",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "srcAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "fetch_chainID",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_destChainID",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_gasLimit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_gasPrice",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_feeToken",
        type: "address",
      },
    ],
    name: "genericDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_interface",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "_chainID",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
    ],
    name: "linkContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_interface",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "_chainID",
        type: "uint8",
      },
    ],
    name: "unlinkContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061062c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80639f77b1fb116100505780639f77b1fb14610094578063aeb5e2fc146100ba578063b2c0f640146100cd57600080fd5b806319cf0df81461006c57806359f4716314610081575b600080fd5b61007f61007a36600461029f565b6100dc565b005b61007f61008f3660046103a7565b610149565b6100a76100a2366004610416565b6101cb565b6040519081526020015b60405180910390f35b61007f6100c8366004610488565b610218565b604051606f81526020016100b1565b604051633e27323d60e01b815260ff831660048201526001600160a01b038281166024830152849190821690633e27323d90604401600060405180830381600087803b15801561012b57600080fd5b505af115801561013f573d6000803e3d6000fd5b5050505050505050565b6040516306d07c5960e01b815284906001600160a01b038216906306d07c599061017b90879087908790600401610517565b6000604051808303816000875af115801561019a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101c2919081019061054b565b50505050505050565b60007f2542d3b4548cca8ef03a46382b048cf711cb23e030be462bcbd73aef8a24a06686868686866040516102049594939291906105dd565b60405180910390a150600195945050505050565b604051637f4ee40d60e11b815260ff8216600482015282906001600160a01b0382169063fe9dc81a90602401600060405180830381600087803b15801561025e57600080fd5b505af11580156101c2573d6000803e3d6000fd5b80356001600160a01b038116811461028957600080fd5b919050565b803560ff8116811461028957600080fd5b6000806000606084860312156102b457600080fd5b6102bd84610272565b92506102cb6020850161028e565b91506102d960408501610272565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610321576103216102e2565b604052919050565b600067ffffffffffffffff821115610343576103436102e2565b50601f01601f191660200190565b600082601f83011261036257600080fd5b813561037561037082610329565b6102f8565b81815284602083860101111561038a57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156103bd57600080fd5b6103c685610272565b93506103d46020860161028e565b92506103e260408601610272565b9150606085013567ffffffffffffffff8111156103fe57600080fd5b61040a87828801610351565b91505092959194509250565b600080600080600060a0868803121561042e57600080fd5b6104378661028e565b9450602086013567ffffffffffffffff81111561045357600080fd5b61045f88828901610351565b945050604086013592506060860135915061047c60808701610272565b90509295509295909350565b6000806040838503121561049b57600080fd5b6104a483610272565b91506104b26020840161028e565b90509250929050565b60005b838110156104d65781810151838201526020016104be565b838111156104e5576000848401525b50505050565b600081518084526105038160208601602086016104bb565b601f01601f19169290920160200192915050565b60ff841681526001600160a01b038316602082015260606040820152600061054260608301846104eb565b95945050505050565b6000806040838503121561055e57600080fd5b8251801515811461056e57600080fd5b602084015190925067ffffffffffffffff81111561058b57600080fd5b8301601f8101851361059c57600080fd5b80516105aa61037082610329565b8181528660208385010111156105bf57600080fd5b6105d08260208301602086016104bb565b8093505050509250929050565b60ff8616815260a0602082015260006105f960a08301876104eb565b60408301959095525060608101929092526001600160a01b03166080909101529291505056fea164736f6c634300080d000a";

type GenericHandlerTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GenericHandlerTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GenericHandlerTest__factory extends ContractFactory {
  constructor(...args: GenericHandlerTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GenericHandlerTest> {
    return super.deploy(overrides || {}) as Promise<GenericHandlerTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GenericHandlerTest {
    return super.attach(address) as GenericHandlerTest;
  }
  override connect(signer: Signer): GenericHandlerTest__factory {
    return super.connect(signer) as GenericHandlerTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GenericHandlerTestInterface {
    return new utils.Interface(_abi) as GenericHandlerTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GenericHandlerTest {
    return new Contract(address, _abi, signerOrProvider) as GenericHandlerTest;
  }
}
