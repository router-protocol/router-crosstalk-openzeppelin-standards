/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  GenericHandlerTest,
  GenericHandlerTestInterface,
} from "../../../contracts/test/GenericHandlerTest";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "chainID",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "bytes4",
        name: "_interface",
        type: "bytes4",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_gas",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_feeToken",
        type: "address",
      },
    ],
    name: "deposit",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_crossTalkAddr",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "srcChainID",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "srcAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "fetch_chainID",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_destChainID",
        type: "uint8",
      },
      {
        internalType: "bytes4",
        name: "_selector",
        type: "bytes4",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_gas",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_feeToken",
        type: "address",
      },
    ],
    name: "genericDeposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_interface",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "_chainID",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
    ],
    name: "linkContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_interface",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "_chainID",
        type: "uint8",
      },
    ],
    name: "unlinkContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610660806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806359f471631161005057806359f4716314610094578063aeb5e2fc146100a7578063b2c0f640146100ba57600080fd5b80630eb1c3231461006c57806319cf0df814610081575b600080fd5b61007f61007a366004610352565b6100ce565b005b61007f61008f3660046103fa565b610117565b61007f6100a236600461043d565b610184565b61007f6100b53660046104ac565b610206565b60408051606f815290519081900360200190f35b7f58f9730ea8946afc75588a1d5fab6cecd54bb6ae8697f217a3d24650a2d1c8ae8686868686866040516101079695949392919061053b565b60405180910390a1505050505050565b604051633e27323d60e01b815260ff831660048201526001600160a01b038281166024830152849190821690633e27323d90604401600060405180830381600087803b15801561016657600080fd5b505af115801561017a573d6000803e3d6000fd5b5050505050505050565b6040516306d07c5960e01b815284906001600160a01b038216906306d07c59906101b69087908790879060040161058d565b6000604051808303816000875af11580156101d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101fd91908101906105c1565b50505050505050565b604051637f4ee40d60e11b815260ff8216600482015282906001600160a01b0382169063fe9dc81a90602401600060405180830381600087803b15801561024c57600080fd5b505af11580156101fd573d6000803e3d6000fd5b803560ff8116811461027157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156102b5576102b5610276565b604052919050565b600067ffffffffffffffff8211156102d7576102d7610276565b50601f01601f191660200190565b600082601f8301126102f657600080fd5b8135610309610304826102bd565b61028c565b81815284602083860101111561031e57600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b038116811461027157600080fd5b60008060008060008060c0878903121561036b57600080fd5b61037487610260565b955060208701357fffffffff00000000000000000000000000000000000000000000000000000000811681146103a957600080fd5b9450604087013567ffffffffffffffff8111156103c557600080fd5b6103d189828a016102e5565b94505060608701359250608087013591506103ee60a0880161033b565b90509295509295509295565b60008060006060848603121561040f57600080fd5b6104188461033b565b925061042660208501610260565b91506104346040850161033b565b90509250925092565b6000806000806080858703121561045357600080fd5b61045c8561033b565b935061046a60208601610260565b92506104786040860161033b565b9150606085013567ffffffffffffffff81111561049457600080fd5b6104a0878288016102e5565b91505092959194509250565b600080604083850312156104bf57600080fd5b6104c88361033b565b91506104d660208401610260565b90509250929050565b60005b838110156104fa5781810151838201526020016104e2565b83811115610509576000848401525b50505050565b600081518084526105278160208601602086016104df565b601f01601f19169290920160200192915050565b60ff8716815263ffffffff60e01b8616602082015260c06040820152600061056660c083018761050f565b60608301959095525060808101929092526001600160a01b031660a0909101529392505050565b60ff841681526001600160a01b03831660208201526060604082015260006105b8606083018461050f565b95945050505050565b600080604083850312156105d457600080fd5b825180151581146105e457600080fd5b602084015190925067ffffffffffffffff81111561060157600080fd5b8301601f8101851361061257600080fd5b8051610620610304826102bd565b81815286602083850101111561063557600080fd5b6106468260208301602086016104df565b809350505050925092905056fea164736f6c634300080d000a";

type GenericHandlerTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GenericHandlerTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GenericHandlerTest__factory extends ContractFactory {
  constructor(...args: GenericHandlerTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GenericHandlerTest> {
    return super.deploy(overrides || {}) as Promise<GenericHandlerTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GenericHandlerTest {
    return super.attach(address) as GenericHandlerTest;
  }
  override connect(signer: Signer): GenericHandlerTest__factory {
    return super.connect(signer) as GenericHandlerTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GenericHandlerTestInterface {
    return new utils.Interface(_abi) as GenericHandlerTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GenericHandlerTest {
    return new Contract(address, _abi, signerOrProvider) as GenericHandlerTest;
  }
}
